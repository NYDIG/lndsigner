// Copyright (C) 2013-2017 The btcsuite developers
// Copyright (C) 2015-2016 The Decred developers
// Copyright (C) 2015-2022 Lightning Labs and The Lightning Network Developers
// Copyright (C) 2022 Bottlepay and The Lightning Network Developers

syntax = "proto3";

package proto;

option go_package = "github.com/bottlepay/lndsigner/proto";

/*
 * Comments in this file will be directly parsed into the API
 * Documentation as descriptions of the associated method, message, or field.
 * These descriptions should go right above the definition of the object, and
 * can be in either block or // comment format.
 *
 * An RPC method can be matched to an lncli command by placing a line in the
 * beginning of the description in exactly the following format:
 * lncli: `methodname`
 *
 * Failure to specify the exact name of the command will cause documentation
 * generation to fail.
 *
 * More information on how exactly the gRPC documentation is generated from
 * this proto file can be found here:
 * https://github.com/lightninglabs/lightning-api
 */

// Lightning is the main RPC server of the daemon.
service Lightning {
  /* lncli: `signmessage`
  SignMessage signs a message with this node's private key. The returned
  signature string is `zbase32` encoded and pubkey recoverable, meaning that
  only the message digest and signature are needed for verification.
  */
  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
}

message SignMessageRequest {
  /*
  The message to be signed. When using REST, this field must be encoded as
  base64.
  */
  bytes msg = 1;

  /*
  Instead of the default double-SHA256 hashing of the message before signing,
  only use one round of hashing instead.
  */
  bool single_hash = 2;
}
message SignMessageResponse {
  // The signature for the given message
  string signature = 1;
}

message KeyLocator {
  // The family of key being identified.
  int32 key_family = 1;

  // The precise index of the key being identified.
  int32 key_index = 2;
}

message KeyDescriptor {
  /*
  The raw bytes of the key being identified.
  */
  bytes raw_key_bytes = 1;

  /*
  The key locator that identifies which key to use for signing.
  */
  KeyLocator key_loc = 2;
}
