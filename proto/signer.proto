// Copyright (C) 2013-2017 The btcsuite developers
// Copyright (C) 2015-2016 The Decred developers
// Copyright (C) 2015-2022 Lightning Labs and The Lightning Network Developers
// Copyright (C) 2022 Bottlepay and The Lightning Network Developers

syntax = "proto3";

import "lightning.proto";

package proto;

option go_package = "github.com/bottlepay/lndsigner/proto";

// Signer is a service that gives access to the signing functionality of the
// daemon's wallet.
service Signer {
  /*
  SignMessage signs a message with the key specified in the key locator. The
  returned signature is fixed-size LN wire format encoded.

  The main difference to SignMessage in the main RPC is that a specific key is
  used to sign the message instead of the node identity private key.
  */
  rpc SignMessage(SignMessageReq) returns (SignMessageResp);

  /*
  DeriveSharedKey returns a shared secret key by performing Diffie-Hellman key
  derivation between the ephemeral public key in the request and the node's
  key specified in the key_desc parameter. Either a key locator or a raw
  public key is expected in the key_desc, if neither is supplied, defaults to
  the node's identity private key:
      P_shared = privKeyNode * ephemeralPubkey
  The resulting shared public key is serialized in the compressed format and
  hashed with sha256, resulting in the final key length of 256bit.
  */
  rpc DeriveSharedKey(SharedKeyRequest) returns (SharedKeyResponse);
}

message SignMessageReq {
  /*
  The message to be signed. When using REST, this field must be encoded as
  base64.
  */
  bytes msg = 1;

  // The key locator that identifies which key to use for signing.
  KeyLocator key_loc = 2;

  // Double-SHA256 hash instead of just the default single round.
  bool double_hash = 3;

  /*
  Use the compact (pubkey recoverable) format instead of the raw lnwire
  format. This option cannot be used with Schnorr signatures.
  */
  bool compact_sig = 4;

  /*
  Use Schnorr signature. This option cannot be used with compact format.
  */
  bool schnorr_sig = 5;

  /*
  The optional Taproot tweak bytes to apply to the private key before creating
  a Schnorr signature. The private key is tweaked as described in BIP-341:
  privKey + h_tapTweak(internalKey || tapTweak)
  */
  bytes schnorr_sig_tap_tweak = 6;
}
message SignMessageResp {
  /*
  The signature for the given message in the fixed-size LN wire format.
  */
  bytes signature = 1;
}

message SharedKeyRequest {
  // The ephemeral public key to use for the DH key derivation.
  bytes ephemeral_pubkey = 1;

  /*
  A key descriptor describes the key used for performing ECDH. Either a key
  locator or a raw public key is expected, if neither is supplied, defaults to
  the node's identity private key.
  */
  KeyDescriptor key_desc = 3;
}

message SharedKeyResponse {
  // The shared public key, hashed with sha256.
  bytes shared_key = 1;
}
